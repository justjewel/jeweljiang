<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>疑难杂症</title>
      <link href="/2019/05/27/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
      <url>/2019/05/27/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</url>
      <content type="html"><![CDATA[<h2 id="1-0写在前面"><a href="#1-0写在前面" class="headerlink" title="1.0写在前面"></a>1.0写在前面</h2><p>经过一段时间的工作和学习，也遇到了很多问题，多方查证也找到了答案，这篇文章将持续记录遇到的问题及解决办法。</p><h2 id="1-1-数组对象的深拷贝与浅拷贝"><a href="#1-1-数组对象的深拷贝与浅拷贝" class="headerlink" title="1.1 数组对象的深拷贝与浅拷贝"></a>1.1 数组对象的深拷贝与浅拷贝</h2><p>在做项目的时候难免遇到数组对象循环的情况，在一次项目代码编写中，需要用到接口请求到的数组对象，其中一个小需求中要将这组数据重新处理，将原有数据加工成为自己需要的数据。<br>但是在使用for循环改变对象键值后，发现循环不仅改变处理后的数组，还改变了原数组。<br>后来了解到数组循环有多种循环方式，如map、mapEach等方法都各有其特性。了解到使用map循环不会改变原数组，于是便改用了map。使用后本以为能顺利解决这个问题，但是却还是改变了原数组。<br>经过多方查证，我发现了问题所在，原来数组对象的循环与数组的循环大有不同。<br>js对象是引用类型，字符和数字是基本类型，基本类型传值是复制，引用类型传值是引用。栗子如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = 1;</span><br><span class="line">var b = a;</span><br><span class="line">b++;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = [1];</span><br><span class="line">var b = a;</span><br><span class="line">b[0]++;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><p>知道问题原因所在后，我了解到数组对象不能单单 let a = b;当为数组对象时，最好最数组对象进行一次深拷贝，这样不仅能将数组完全复制过来，还能保证原数组不被更改。<br>深拷贝可以将数组对象先转换为字符串，再将字符串转换为数组对象，具体操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let list = JSON.parse(JSON.stringify(res.data));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function deepCopy(obj)&#123;</span><br><span class="line">    //判断是否是简单数据类型，</span><br><span class="line">    if(typeof obj == &quot;object&quot;)&#123;</span><br><span class="line">        //复杂数据类型</span><br><span class="line">        var result = obj.constructor == Array ? [] : &#123;&#125;;</span><br><span class="line">        for(let i in obj)&#123;</span><br><span class="line">            result[i] = typeof obj[i] == &quot;object&quot; ? deepCopy(obj[i]) : obj[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        //简单数据类型 直接 == 赋值</span><br><span class="line">        var result = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let path = arr.map((e, i) =&gt; i % 2 ? null : [arr[i], arr[i + 1]]).filter(Boolean); // 两两取出</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>源力彤项目思路整理</title>
      <link href="/2018/09/04/%E6%BA%90%E5%8A%9B%E5%BD%A4%E9%A1%B9%E7%9B%AE%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/"/>
      <url>/2018/09/04/%E6%BA%90%E5%8A%9B%E5%BD%A4%E9%A1%B9%E7%9B%AE%E6%80%9D%E8%B7%AF%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="项目前提"><a href="#项目前提" class="headerlink" title="项目前提"></a>项目前提</h2><p>本项目主要是界面ui更换，涉及技术主要是react16 + webpack4 + antd3。</p><h2 id="项目具体内容"><a href="#项目具体内容" class="headerlink" title="项目具体内容"></a>项目具体内容</h2><p>主要页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">登录页面</span><br><span class="line">主页</span><br></pre></td></tr></table></figure></p><h2 id="涉及技术"><a href="#涉及技术" class="headerlink" title="涉及技术"></a>涉及技术</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">antd组件:input、button、icon、footer、layout、message等</span><br><span class="line">react：Axios、router、localstorge等</span><br></pre></td></tr></table></figure><h2 id="登录页（login）"><a href="#登录页（login）" class="headerlink" title="登录页（login）"></a>登录页（login）</h2><p>此页面主要是表单，主要涉及的逻辑是将输入的数据提交到接口验证，通过后显示主页，否则提示错误信息。</p><h2 id="登录页具体思路"><a href="#登录页具体思路" class="headerlink" title="登录页具体思路"></a>登录页具体思路</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将用户输入的账号和密码通过调取接口进行验证，在localstorge中存取接口返回值，成功后进入主页。</span><br><span class="line">记住密码：此项功能是判断用户是否点击了记住密码的check选项，若点击就将用户信息存在浏览器缓存中，否则不存取。</span><br></pre></td></tr></table></figure><h2 id="主页（main）"><a href="#主页（main）" class="headerlink" title="主页（main）"></a>主页（main）</h2><p>此页面主要显示从登陆接口拿到的菜单以及页面，并且通过token判断用户登录是否过期，若过期则返回登录页，否则保持登录。</p><h2 id="主页大致框架"><a href="#主页大致框架" class="headerlink" title="主页大致框架"></a>主页大致框架</h2><h5 id="（1）page-container"><a href="#（1）page-container" class="headerlink" title="（1）page-container"></a>（1）page-container</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">左侧</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（2)左侧side-bar</span><br><span class="line">（3)menu</span><br><span class="line">（4）menu-header</span><br><span class="line">（5）menu-logo</span><br><span class="line">（6）menu-content</span><br><span class="line">（7）menu-item</span><br><span class="line">（8）sub-menu-item</span><br><span class="line">（9）collapsed-menu</span><br><span class="line">（10）sub-collapsed-menu</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">右侧content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">（11)header-nav</span><br><span class="line">（12）header-left</span><br><span class="line">（13）header-right</span><br><span class="line"></span><br><span class="line">（14）main</span><br><span class="line">（15）main-content</span><br><span class="line">（16）iframe-title</span><br><span class="line">（17）iframe-content</span><br></pre></td></tr></table></figure><h2 id="主页具体内容与思路"><a href="#主页具体内容与思路" class="headerlink" title="主页具体内容与思路"></a>主页具体内容与思路</h2><p>1、菜单（此内容可用到antd的menu组件、layout组件）</p><p>（1）配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">菜单配置页面（menu-config）：此页面主要取出localstorge中的数据，将组成菜单的数据单独提取出来，组成菜单数组，供菜单组件使用。</span><br><span class="line">疑问？若是此页面取存取在localstorge里面的数组，当admin页面配置了新的菜单，需用户退出登录后再登录一次才可以更新菜单？</span><br></pre></td></tr></table></figure></p><p>（2）菜单ui<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据antd的思路，菜单分为Menu.Item、Menu.SubMenu,循环菜单配置页面的数据</span><br></pre></td></tr></table></figure></p><p>2、header</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主要显示收起菜单按钮、用户名、头像，以及点击头像出现的菜单选项</span><br><span class="line">还需要一个切换主题的按钮</span><br><span class="line">此项内容需提取接口中当前登录人的名称和头像进行显示，按钮控制左侧菜单进行收缩</span><br><span class="line">退出登录：点击按钮后清除本地用户名和密码缓存，并返回到登录页面</span><br></pre></td></tr></table></figure><p>3、content</p><p>此内容主要是对后台给的url进行显示，将url中的页面解析到具体位置上<br>需注意排版、自适应、刷新页面、iframe点击</p><p>4、主题切换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要写几套不同的配色方案，当触发某项时，切换显示不同的界面</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 工作笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>css+html学习心得</title>
      <link href="/2018/07/19/css-html%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
      <url>/2018/07/19/css-html%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<p>#<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当初只是觉得这门语言挺有趣的，css拼拼凑凑就可以出来一个很漂亮的页面，感觉很简单，所有的一切都是靠自己的理解，总觉得自己都会了，可是最近进行规范</span><br><span class="line">开发才发现自己对于html和css的理解远远不够，比如之前使用css的时候都是靠自己的理解去写，</span><br><span class="line">并没有管过什么格式问题，所有的代码都是哪里需要改就直接找个空位填写下去，但是在这段时间</span><br><span class="line">对css的理解，发现所有的语言都有其特定规则，其特定的代码规范。</span><br><span class="line">又觉得自己什么都不会了，感觉自己现阶段需要将那些只是都补回来，css、html、JavaScript统统都需要重新学习，所以要加油了。</span><br></pre></td></tr></table></figure></p><p># </p><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><h3 id="css书写顺序"><a href="#css书写顺序" class="headerlink" title="css书写顺序"></a>css书写顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.位置属性(position, top, right, z-index,display, float等)</span><br><span class="line"></span><br><span class="line">　　2.大小(width, height, padding, margin)</span><br><span class="line"></span><br><span class="line">　　3.文字系列(font, line-height, letter-spacing,color- text-align等)</span><br><span class="line"></span><br><span class="line">　　4.背景(background, border等)</span><br><span class="line"></span><br><span class="line">　　5.其他(animation, transition等)</span><br></pre></td></tr></table></figure><h3 id="书写规范使用CSS缩写属性"><a href="#书写规范使用CSS缩写属性" class="headerlink" title="书写规范使用CSS缩写属性"></a>书写规范使用CSS缩写属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">　CSS有些属性是可以缩写的，比如padding,margin,font等等，这样精简代码同时又能提高用户的阅读体验。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　去掉小数点前的“0”</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　简写命名</span><br><span class="line"></span><br><span class="line">　　很多用户都喜欢简写类名，但前提是要让人看懂你的命名才能简写哦!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　16进制颜色代码缩写</span><br><span class="line"></span><br><span class="line">　　有些颜色代码是可以缩写的，我们就尽量缩写吧，提高用户体验为主。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　连字符CSS选择器命名规范</span><br><span class="line"></span><br><span class="line">　　1.长名称或词组可以使用中横线来为选择器命名。</span><br><span class="line"></span><br><span class="line">　　2.不建议使用“_”下划线来命名CSS选择器，为什么呢?</span><br><span class="line"></span><br><span class="line">　　输入的时候少按一个shift键;</span><br><span class="line"></span><br><span class="line">　　浏览器兼容问题 (比如使用_tips的选择器命名，在IE6是无效的)</span><br><span class="line"></span><br><span class="line">　　能良好区分JavaScript变量命名(JS变量命名是用“_”)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　不要随意使用Id</span><br><span class="line"></span><br><span class="line">　　id在JS是唯一的，不能多次使用，而使用class类选择器却可以重复使用，另外id的优先级优先与class，所以id应该按需使用，而不能滥用。　</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　为选择器添加状态前缀</span><br><span class="line"></span><br><span class="line">　　有时候可以给选择器添加一个表示状态的前缀，让语义更明了，比如下图是添加了“.is-”前缀。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　CSS命名规范(规则)常用的CSS命名规则</span><br><span class="line"></span><br><span class="line">　　头：header</span><br><span class="line"></span><br><span class="line">　　内容：content/container</span><br><span class="line"></span><br><span class="line">　　尾：footer</span><br><span class="line"></span><br><span class="line">　　导航：nav</span><br><span class="line"></span><br><span class="line">　　侧栏：sidebar</span><br><span class="line"></span><br><span class="line">　　栏目：column</span><br><span class="line"></span><br><span class="line">　　页面外围控制整体佈局宽度：wrapper</span><br><span class="line"></span><br><span class="line">　　左右中：left right center</span><br><span class="line"></span><br><span class="line">　　登录条：loginbar</span><br><span class="line"></span><br><span class="line">　　标志：logo</span><br><span class="line"></span><br><span class="line">　　广告：banner</span><br><span class="line"></span><br><span class="line">　　页面主体：main</span><br><span class="line"></span><br><span class="line">　　热点：hot</span><br><span class="line"></span><br><span class="line">　　新闻：news</span><br><span class="line"></span><br><span class="line">　　下载：download</span><br><span class="line"></span><br><span class="line">　　子导航：subnav</span><br><span class="line"></span><br><span class="line">　　菜单：menu</span><br><span class="line"></span><br><span class="line">　　子菜单：submenu</span><br><span class="line"></span><br><span class="line">　　搜索：search</span><br><span class="line"></span><br><span class="line">　　友情链接：friendlink</span><br><span class="line"></span><br><span class="line">　　页脚：footer</span><br><span class="line"></span><br><span class="line">　　版权：copyright</span><br><span class="line"></span><br><span class="line">　　滚动：scroll</span><br><span class="line"></span><br><span class="line">　　内容：content</span><br><span class="line"></span><br><span class="line">　　标签：tags</span><br><span class="line"></span><br><span class="line">　　文章列表：list</span><br><span class="line"></span><br><span class="line">　　提示信息：msg</span><br><span class="line"></span><br><span class="line">　　小技巧：tips</span><br><span class="line"></span><br><span class="line">　　栏目标题：title</span><br><span class="line"></span><br><span class="line">　　加入：joinus</span><br><span class="line"></span><br><span class="line">　　指南：guide</span><br><span class="line"></span><br><span class="line">　　服务：service</span><br><span class="line"></span><br><span class="line">　　注册：regsiter</span><br><span class="line"></span><br><span class="line">　　状态：status</span><br><span class="line"></span><br><span class="line">　　投票：vote</span><br><span class="line"></span><br><span class="line">　　合作伙伴：partner</span><br></pre></td></tr></table></figure><h3 id="注释的写法"><a href="#注释的写法" class="headerlink" title="注释的写法:"></a>注释的写法:</h3><pre><code>　　/* Header */　　内容区　　/* End Header */</code></pre><p>Id的命名:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　容器: container</span><br><span class="line"></span><br><span class="line">　　页头：header</span><br><span class="line"></span><br><span class="line">　　内容：content/container</span><br><span class="line"></span><br><span class="line">　　页面主体：main</span><br><span class="line"></span><br><span class="line">　　页尾：footer</span><br><span class="line"></span><br><span class="line">　　导航：nav</span><br><span class="line"></span><br><span class="line">　　侧栏：sidebar</span><br><span class="line"></span><br><span class="line">　　栏目：column</span><br><span class="line"></span><br><span class="line">　　页面外围控制整体佈局宽度：wrapper</span><br><span class="line"></span><br><span class="line">　　左右中：left right center</span><br></pre></td></tr></table></figure><p>(2)导航</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　主导航：mainnav</span><br><span class="line"></span><br><span class="line">　　子导航：subnav</span><br><span class="line"></span><br><span class="line">　　顶导航：topnav</span><br><span class="line"></span><br><span class="line">　　边导航：sidebar</span><br><span class="line"></span><br><span class="line">　　左导航：leftsidebar</span><br><span class="line"></span><br><span class="line">　　右导航：rightsidebar</span><br><span class="line"></span><br><span class="line">　　菜单：menu</span><br><span class="line"></span><br><span class="line">　　子菜单：submenu</span><br><span class="line"></span><br><span class="line">　　标题: title</span><br><span class="line"></span><br><span class="line">　　摘要: summary</span><br></pre></td></tr></table></figure><p>(3)功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　广告：banner</span><br><span class="line"></span><br><span class="line">　　登陆：login</span><br><span class="line"></span><br><span class="line">　　登录条：loginbar</span><br><span class="line"></span><br><span class="line">　　注册：register</span><br><span class="line"></span><br><span class="line">　　搜索：search</span><br><span class="line"></span><br><span class="line">　　功能区：shop</span><br><span class="line"></span><br><span class="line">　　标题：title</span><br><span class="line"></span><br><span class="line">　　加入：joinus</span><br><span class="line"></span><br><span class="line">　　状态：status</span><br><span class="line"></span><br><span class="line">　　按钮：btn</span><br><span class="line"></span><br><span class="line">　　滚动：scroll</span><br><span class="line"></span><br><span class="line">　　标籤页：tab</span><br><span class="line"></span><br><span class="line">　　文章列表：list</span><br><span class="line"></span><br><span class="line">　　提示信息：msg</span><br><span class="line"></span><br><span class="line">　　当前的: current</span><br><span class="line"></span><br><span class="line">　　小技巧：tips</span><br><span class="line"></span><br><span class="line">　　图标: icon</span><br><span class="line"></span><br><span class="line">　　注释：note</span><br><span class="line"></span><br><span class="line">　　指南：guild</span><br><span class="line"></span><br><span class="line">　　服务：service</span><br><span class="line"></span><br><span class="line">　　热点：hot</span><br><span class="line"></span><br><span class="line">　　新闻：news</span><br><span class="line"></span><br><span class="line">　　下载：download</span><br><span class="line"></span><br><span class="line">　　投票：vote</span><br><span class="line"></span><br><span class="line">　　合作伙伴：partner</span><br><span class="line"></span><br><span class="line">　　友情链接：link</span><br><span class="line"></span><br><span class="line">　　版权：copyright</span><br></pre></td></tr></table></figure><p>注意事项::</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　2.尽量用英文;</span><br><span class="line"></span><br><span class="line">　　3.不加中槓和下划线;</span><br><span class="line"></span><br><span class="line">　　4.尽量不缩写，除非一看就明白的单词。</span><br></pre></td></tr></table></figure><p>CSS样式表文件命名</p><figure class="highlight plain"><figcaption><span>master.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　模块 module.css</span><br><span class="line"></span><br><span class="line">　　基本共用 base.css</span><br><span class="line"></span><br><span class="line">　　布局、版面 layout.css</span><br><span class="line"></span><br><span class="line">　　主题 themes.css</span><br><span class="line"></span><br><span class="line">　　专栏 columns.css</span><br><span class="line"></span><br><span class="line">　　文字 font.css</span><br><span class="line"></span><br><span class="line">　　表单 forms.css</span><br><span class="line"></span><br><span class="line">　　补丁 mend.css</span><br><span class="line"></span><br><span class="line">　　打印 print.css</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>JavaScript知识点</title>
      <link href="/2018/07/18/JavaScript%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2018/07/18/JavaScript%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="JavaScript导论"><a href="#JavaScript导论" class="headerlink" title="JavaScript导论"></a>JavaScript导论</h2><p>JavaScript 是一种轻量级的脚本语言。所谓“脚本语言”（script language），指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序（比如浏览器）的“脚本”。<br>vue中所使用的typescript被称作JavaScript的超集。</p><h2 id="JavaScript运算"><a href="#JavaScript运算" class="headerlink" title="JavaScript运算"></a>JavaScript运算</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">赋值表达式</span> <span class="string">"="</span><span class="string">:使用此表达式会给变量赋值（不可对变量进行判断)</span></span><br><span class="line"><span class="string">相等运算“==”:使用此表达式对变量进行相等判断。</span></span><br><span class="line"><span class="string">严格相等运算“===”：使用此表达式对变量的进行严格相等判断</span></span><br></pre></td></tr></table></figure><p>在使用多个ifelse时，可使用switch替换(注意使用break结束循环)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var x = 1;</span><br><span class="line">switch(x)&#123;</span><br><span class="line">case 1;</span><br><span class="line">break;</span><br><span class="line">case 2;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>switch语句部分和case语句部分，都可以使用表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">switch (1 + 3) &#123;</span><br><span class="line">  case 2 + 2:</span><br><span class="line">    f();</span><br><span class="line">    break;</span><br><span class="line">  default:</span><br><span class="line">    neverHappens();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三目运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（条件）？表达式A：表达式B</span><br></pre></td></tr></table></figure><p>JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">label:</span><br><span class="line">  语句</span><br></pre></td></tr></table></figure><p>标签可以是任意的标识符，但不能是保留字，语句部分可以是任意语句。</p><p>标签通常与break语句和continue语句配合使用，跳出特定的循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">top:</span><br><span class="line">  for (var i = 0; i &lt; 3; i++)&#123;</span><br><span class="line">    for (var j = 0; j &lt; 3; j++)&#123;</span><br><span class="line">      if (i === 1 &amp;&amp; j === 1) break top;</span><br><span class="line">      console.log(&apos;i=&apos; + i + &apos;, j=&apos; + j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">// i=0, j=0</span><br><span class="line">// i=0, j=1</span><br><span class="line">// i=0, j=2</span><br><span class="line">// i=1, j=0</span><br></pre></td></tr></table></figure><p>type of<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当遇到后台传来的数据，无法判断其类型，可使用type of。</span><br></pre></td></tr></table></figure></p><p>null与undefined都可以表示“没有”，含义非常相似。将一个变量赋值为undefined或null，老实说，语法效果几乎没区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">于null和undefined，大致可以像下面这样理解。</span><br><span class="line"></span><br><span class="line">null表示空值，即该处的值现在为空。调用函数时，某个参数未设置任何值，这时就可以传入null，表示该参数为空。比如，某个函数接受引擎抛出的错误作为参数，如果运行过程中未出错，那么这个参数就会传入null，表示未发生错误。</span><br><span class="line">undefined表示“未定义”，下面是返回undefined的典型场景。</span><br><span class="line">// 变量声明了，但没有赋值</span><br><span class="line">var i;</span><br><span class="line">i // undefined</span><br><span class="line"></span><br><span class="line">// 调用函数时，应该提供的参数没有提供，该参数等于 undefined</span><br><span class="line">function f(x) &#123;</span><br><span class="line">  return x;</span><br><span class="line">&#125;</span><br><span class="line">f() // undefined</span><br><span class="line"></span><br><span class="line">// 对象没有赋值的属性</span><br><span class="line">var  o = new Object();</span><br><span class="line">o.p // undefined</span><br><span class="line"></span><br><span class="line">// 函数没有返回值时，默认返回 undefined</span><br><span class="line">function f() &#123;&#125;</span><br><span class="line">f() // undefined</span><br></pre></td></tr></table></figure><h2 id="与数值相关的全局方法"><a href="#与数值相关的全局方法" class="headerlink" title="与数值相关的全局方法"></a>与数值相关的全局方法</h2><p>parseInt() ：parseInt方法用于将字符串转为整数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseInt(&apos;123&apos;) // 123</span><br></pre></td></tr></table></figure><p>如果字符串头部有空格，空格会被自动去除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseInt(&apos;   81&apos;) // 81</span><br></pre></td></tr></table></figure></p><p>字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。</p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>反斜杠（\）在字符串内有特殊含义，用来表示一些特殊字符，所以又称为转义符。</p><p>需要用反斜杠转义的特殊字符，主要有下面这些。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">\0 ：null（\u0000）</span><br><span class="line">\b ：后退键（\u0008）</span><br><span class="line">\f ：换页符（\u000C）</span><br><span class="line">\n ：换行符（\u000A）</span><br><span class="line">\r ：回车键（\u000D）</span><br><span class="line">\t ：制表符（\u0009）</span><br><span class="line">\v ：垂直制表符（\u000B）</span><br><span class="line">\&apos; ：单引号（\u0027）</span><br><span class="line">\&quot; ：双引号（\u0022）</span><br><span class="line">\\ ：反斜杠（\u005C）</span><br><span class="line">上面这些字符前面加上反斜杠，都表示特殊含义。</span><br></pre></td></tr></table></figure></p><h2 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h2><p>对象（object）是 JavaScript 语言的核心概念，也是最重要的数据类型。<br>什么是对象？简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  foo: &apos;Hello&apos;,</span><br><span class="line">  bar: &apos;World&apos;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，大括号就定义了一个对象，它被赋值给变量obj，所以变量obj就指向一个对象。该对象内部包含两个键值对（又称为两个“成员”），第一个键值对是foo: ‘Hello’，其中foo是“键名”（成员的名称），字符串Hello是“键值”（成员的值）。键名与键值之间用冒号分隔。第二个键值对是bar: ‘World’，bar键名，World是键值。两个键值对之间用逗号分隔。</p><h2 id="键名"><a href="#键名" class="headerlink" title="键名"></a>键名</h2><p>对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以。上面的代码也可以写成下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  &apos;foo&apos;: &apos;Hello&apos;,</span><br><span class="line">  &apos;bar&apos;: &apos;World&apos;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="对象的引用"><a href="#对象的引用" class="headerlink" title="对象的引用"></a>对象的引用</h2><p>如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，也就是说指向同一个内存地址。修改其中一个变量，会影响到其他所有变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var o1 = &#123;&#125;;</span><br><span class="line">var o2 = o1;</span><br><span class="line"></span><br><span class="line">o1.a = 1;</span><br><span class="line">o2.a // 1</span><br><span class="line"></span><br><span class="line">o2.b = 2;</span><br><span class="line">o1.b // 2</span><br></pre></td></tr></table></figure><p>对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？为了避免这种歧义，V8 引擎规定，如果行首是大括号，一律解释为对象。不过，为了避免歧义，最好在大括号前加上圆括号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(&#123; foo: 123&#125;)</span><br><span class="line">eval(&apos;&#123;foo: 123&#125;&apos;) // 123</span><br><span class="line">eval(&apos;(&#123;foo: 123&#125;)&apos;) // &#123;foo: 123&#125;</span><br></pre></td></tr></table></figure><p>查看一个对象本身的所有属性，可以使用Object.keys方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  key1: 1,</span><br><span class="line">  key2: 2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Object.keys(obj);</span><br><span class="line">// [&apos;key1&apos;, &apos;key2&apos;]</span><br></pre></td></tr></table></figure><p>delete命令用于删除对象的属性，删除成功后返回true。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123; p: 1 &#125;;</span><br><span class="line">Object.keys(obj) // [&quot;p&quot;]</span><br><span class="line"></span><br><span class="line">delete obj.p // true</span><br><span class="line">obj.p // undefined</span><br><span class="line">Object.keys(obj) // []</span><br></pre></td></tr></table></figure><h2 id="属性的遍历：for…in-循环"><a href="#属性的遍历：for…in-循环" class="headerlink" title="属性的遍历：for…in 循环"></a>属性的遍历：for…in 循环</h2><p>for…in循环用来遍历一个对象的全部属性。</p><ul><li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li><li>它不仅遍历对象自身的属性，还遍历继承的属性。<br>举例来说，对象都继承了toString属性，但是for…in循环不会遍历到这个属性。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;a: 1, b: 2, c: 3&#125;;</span><br><span class="line"></span><br><span class="line">for (var i in obj) &#123;</span><br><span class="line">  console.log(&apos;键名：&apos;, i);</span><br><span class="line">  console.log(&apos;键值：&apos;, obj[i]);</span><br><span class="line">&#125;</span><br><span class="line">// 键名： a</span><br><span class="line">// 键值： 1</span><br><span class="line">// 键名： b</span><br><span class="line">// 键值： 2</span><br><span class="line">// 键名： c</span><br><span class="line">// 键值： 3</span><br></pre></td></tr></table></figure></li></ul><p>with语句的格式如下：它的作用是操作同一个对象的多个属性时，提供一些书写的方便。</p><ul><li>注意，如果with区块内部有变量的赋值操作，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">with (对象) &#123;</span><br><span class="line">  语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 例一</span><br><span class="line">var obj = &#123;</span><br><span class="line">  p1: 1,</span><br><span class="line">  p2: 2,</span><br><span class="line">&#125;;</span><br><span class="line">with (obj) &#123;</span><br><span class="line">  p1 = 4;</span><br><span class="line">  p2 = 5;</span><br><span class="line">&#125;</span><br><span class="line">// 等同于</span><br><span class="line">obj.p1 = 4;</span><br><span class="line">obj.p2 = 5;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 例二</span><br><span class="line">with (document.links[0])&#123;</span><br><span class="line">  console.log(href);</span><br><span class="line">  console.log(title);</span><br><span class="line">  console.log(style);</span><br><span class="line">&#125;</span><br><span class="line">// 等同于</span><br><span class="line">console.log(document.links[0].href);</span><br><span class="line">console.log(document.links[0].title);</span><br><span class="line">console.log(document.links[0].style);</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">with (obj) &#123;</span><br><span class="line">  p1 = 4;</span><br><span class="line">  p2 = 5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.p1 // undefined</span><br><span class="line">p1 // 4</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>JavaScript 有三种声明函数的方法。</p><ul><li>（1）function 命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function print(s) &#123;</span><br><span class="line">  console.log(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（2）函数表达式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var print = function(s) &#123;</span><br><span class="line">  console.log(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>（3）Function 构造函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var add = new Function(</span><br><span class="line">  &apos;x&apos;,</span><br><span class="line">  &apos;y&apos;,</span><br><span class="line">  &apos;return x + y&apos;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// 等同于</span><br><span class="line">function add(x, y) &#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tips:</p><ul><li>如果同一个函数被多次声明，后面的声明就会覆盖前面的声明。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function f() &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">&#125;</span><br><span class="line">f() // 2</span><br><span class="line"></span><br><span class="line">function f() &#123;</span><br><span class="line">  console.log(2);</span><br><span class="line">&#125;</span><br><span class="line">f() // 2</span><br></pre></td></tr></table></figure><p>圆括号运算符，return 语句和递归</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function add(x, y) &#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(1, 1) // 2</span><br></pre></td></tr></table></figure><ul><li><p>上面代码中，函数名后面紧跟一对圆括号，就会调用这个函数。</p><p>函数体内部的return语句，表示返回。JavaScript 引擎遇到return语句，就直接返回return后面的那个表达式的值，后面即使还有语句，也不会得到执行。也就是说，return语句所带的那个表达式，就是函数的返回值。return语句不是必需的，如果没有的话，该函数就不返回任何值，或者说返回undefined。</p><p>函数可以调用自身，这就是递归（recursion）。</p></li></ul><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><ul><li>函数的toString方法返回一个字符串，内容是函数的源码。</li><li>函数内部的注释也可以返回。(利用这一点，可以变相实现多行字符串。)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">function f() &#123;</span><br><span class="line">  a();</span><br><span class="line">  b();</span><br><span class="line">  c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f.toString()</span><br><span class="line">// function f() &#123;</span><br><span class="line">//  a();</span><br><span class="line">//  b();</span><br><span class="line">//  c();</span><br><span class="line">// &#125;</span><br><span class="line">函数内部的注释也可以返回。</span><br><span class="line"></span><br><span class="line">function f() &#123;/*</span><br><span class="line">  这是一个</span><br><span class="line">  多行注释</span><br><span class="line">*/&#125;</span><br><span class="line"></span><br><span class="line">f.toString()</span><br><span class="line">// &quot;function f()&#123;/*</span><br><span class="line">//   这是一个</span><br><span class="line">//   多行注释</span><br><span class="line">// */&#125;&quot;</span><br><span class="line">利用这一点，可以变相实现多行字符串。</span><br><span class="line"></span><br><span class="line">var multiline = function (fn) &#123;</span><br><span class="line">  var arr = fn.toString().split(&apos;\n&apos;);</span><br><span class="line">  return arr.slice(1, arr.length - 1).join(&apos;\n&apos;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function f() &#123;/*</span><br><span class="line">  这是一个</span><br><span class="line">  多行注释</span><br><span class="line">*/&#125;</span><br><span class="line"></span><br><span class="line">multiline(f);</span><br><span class="line">// &quot; 这是一个</span><br><span class="line">//   多行注释&quot;</span><br></pre></td></tr></table></figure><h2 id="arguments-对象"><a href="#arguments-对象" class="headerlink" title="arguments 对象"></a>arguments 对象</h2><ul><li><p>由于 JavaScript 允许函数有不定数目的参数，所以需要一种机制，可以在函数体内部读取所有参数。这就是arguments对象的由来。</p></li><li><p>arguments对象包含了函数运行时的所有参数，arguments[0]就是第一个参数，arguments[1]就是第二个参数，以此类推。这个对象只有在函数体内部，才可以使用。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var f = function (one) &#123;</span><br><span class="line">  console.log(arguments[0]);</span><br><span class="line">  console.log(arguments[1]);</span><br><span class="line">  console.log(arguments[2]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(1, 2, 3)</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 3</span><br></pre></td></tr></table></figure><p>正常模式下，arguments对象可以在运行时修改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var f = function(a, b) &#123;</span><br><span class="line">  arguments[0] = 3;</span><br><span class="line">  arguments[1] = 2;</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(1, 1) // 5</span><br></pre></td></tr></table></figure></p><p>上面代码中，函数f调用时传入的参数，在函数内部被修改成3和2。</p><p>严格模式下，arguments对象是一个只读对象，修改它是无效的，但不会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var f = function(a, b) &#123;</span><br><span class="line">  &apos;use strict&apos;; // 开启严格模式</span><br><span class="line">  arguments[0] = 3; // 无效</span><br><span class="line">  arguments[1] = 2; // 无效</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(1, 1) // 2</span><br></pre></td></tr></table></figure></p><p>上面代码中，函数体内是严格模式，这时修改arguments对象就是无效的。</p><p>通过arguments对象的length属性，可以判断函数调用时到底带几个参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function f() &#123;</span><br><span class="line">  return arguments.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(1, 2, 3) // 3</span><br><span class="line">f(1) // 1</span><br><span class="line">f() // 0</span><br></pre></td></tr></table></figure></p><p>（2）与数组的关系</p><p>需要注意的是，虽然arguments很像数组，但它是一个对象。数组专有的方法（比如slice和forEach），不能在arguments对象上直接使用。</p><p>如果要让arguments对象使用数组方法，真正的解决方法是将arguments转为真正的数组。下面是两种常用的转换方法：slice方法和逐一填入新数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var args = Array.prototype.slice.call(arguments);</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">var args = [];</span><br><span class="line">for (var i = 0; i &lt; arguments.length; i++) &#123;</span><br><span class="line">  args.push(arguments[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="math-对象"><a href="#math-对象" class="headerlink" title="math 对象"></a>math 对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* Math.E：常数e。</span><br><span class="line">* Math.LN2：2 的自然对数。</span><br><span class="line">* Math.LN10：10 的自然对数。</span><br><span class="line">* Math.LOG2E：以 2 为底的e的对数。</span><br><span class="line">* Math.LOG10E：以 10 为底的e的对数。</span><br><span class="line">* Math.PI：常数 Pi。</span><br><span class="line">* Math.SQRT1_2：0.5 的平方根。</span><br><span class="line">* Math.SQRT2：2 的平方根。</span><br><span class="line"></span><br><span class="line">Math对象提供以下一些静态方法。</span><br><span class="line"></span><br><span class="line">* Math.abs()：绝对值</span><br><span class="line">* Math.ceil()：向上取整</span><br><span class="line">* Math.floor()：向下取整</span><br><span class="line">* Math.max()：最大值</span><br><span class="line">* Math.min()：最小值</span><br><span class="line">* Math.pow()：指数运算</span><br><span class="line">* Math.sqrt()：平方根</span><br><span class="line">* Math.log()：自然对数</span><br><span class="line">* Math.exp()：e的指数</span><br><span class="line">* Math.round()：四舍五入</span><br><span class="line">* Math.random()：随机数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Math.random()</span><br><span class="line"></span><br><span class="line">Math.random()返回0到1之间的一个伪随机数，可能等于0，但是一定小于1。</span><br><span class="line"></span><br><span class="line">Math.random() // 0.7151307314634323</span><br><span class="line">任意范围的随机数生成函数如下。</span><br><span class="line"></span><br><span class="line">function getRandomArbitrary(min, max) &#123;</span><br><span class="line">  return Math.random() * (max - min) + min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getRandomArbitrary(1.5, 6.5)</span><br><span class="line">// 2.4942810038223864</span><br><span class="line">任意范围的随机整数生成函数如下。</span><br><span class="line"></span><br><span class="line">function getRandomInt(min, max) &#123;</span><br><span class="line">  return Math.floor(Math.random() * (max - min + 1)) + min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getRandomInt(1, 6) // 5</span><br><span class="line">返回随机字符的例子如下。</span><br><span class="line"></span><br><span class="line">function random_str(length) &#123;</span><br><span class="line">  var ALPHABET = &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;;</span><br><span class="line">  ALPHABET += &apos;abcdefghijklmnopqrstuvwxyz&apos;;</span><br><span class="line">  ALPHABET += &apos;0123456789-_&apos;;</span><br><span class="line">  var str = &apos;&apos;;</span><br><span class="line">  for (var i=0; i &lt; length; ++i) &#123;</span><br><span class="line">    var rand = Math.floor(Math.random() * ALPHABET.length);</span><br><span class="line">    str += ALPHABET.substring(rand, rand + 1);</span><br><span class="line">  &#125;</span><br><span class="line">  return str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">random_str(6) // &quot;NdQKOr&quot;</span><br><span class="line">上面代码中，random_str函数接受一个整数作为参数，返回变量ALPHABET内的随机字符所组成的指定长度的字符串。</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>JavaScript学习心得</title>
      <link href="/2018/07/18/JavaScript%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
      <url>/2018/07/18/JavaScript%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
